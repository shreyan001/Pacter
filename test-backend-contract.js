/**
 * Backend Contract Format Test
 * Tests if the complete contract structure from backendformat.md
 * is being uploaded to Redis correctly
 */

const API_BASE_URL = "http://localhost:3000";
const UPSTASH_REDIS_REST_URL = "https://bursting-gibbon-19323.upstash.io";
const UPSTASH_REDIS_REST_TOKEN = "AUt7AAIncDIwMGUzNjg2ZDQyYzc0NTIyODJlZTQ5YzAwZDkxMGMyZXAyMTkzMjM";

// Complete contract matching backendformat.md
const testContract = {
  name: "Web Development Project Contract",
  contractAddress: "0x68dde7a0192c9c5c1e0a71cc556579a67458df0d",
  abi: [],
  bytecode: "0x608060405234801561001057600080fd5b50",
  contractType: "escrow",
  partyA: "0x742d35Cc6634C0532925a3b8D4C0C8b3C2e1e1e1",
  partyB: "0x8ba1f109551bD432803012645Hac136c22C177e9",
  description: "Full-stack web application development with React and Node.js",
  networkId: "testnet",
  transactionHash: "0xtest123456789",
  
  // Additional fields that match backendformat.md
  contractHash: "0x1a2b3c4d5e6f7890abcdef1234567890abcd",
  projectType: "web_development",
  currentStage: "Signatures Pending",
  flowType: "execution",
  
  jurisdiction: {
    country: "India",
    countryCode: "IN",
    legalFramework: "Indian Contract Act, 1872",
    disputeResolution: "Indian Courts/Arbitration",
    applicableLaws: ["Indian Contract Act", "Information Technology Act", "Goods and Services Tax Act"],
    timezone: "Asia/Kolkata"
  },
  
  parties: {
    client: {
      name: "John Smith",
      email: "john.smith@company.com",
      walletAddress: "0x742d35Cc6634C0532925a3b8D4C0C8b3C2e1e1e1",
      role: "CLIENT",
      location: {
        country: "India",
        state: "Maharashtra",
        city: "Mumbai"
      }
    },
    freelancer: {
      name: "Alice Johnson",
      email: "alice.johnson@freelancer.com",
      walletAddress: "0x8ba1f109551bD432803012645Hac136c22C177e9",
      role: "FREELANCER",
      skills: ["React", "Node.js", "TypeScript"],
      location: {
        country: "India",
        state: "Karnataka",
        city: "Bangalore"
      }
    }
  },
  
  signatures: {
    client: {
      signed: false,
      signedAt: null,
      signature: null
    },
    freelancer: {
      signed: false,
      signedAt: null,
      signature: null
    },
    bothSigned: false
  },
  
  escrow: {
    amounts: {
      inr: {
        totalAmount: "85000",
        currency: "INR",
        exchangeRateAt: new Date().toISOString(),
        exchangeRate: "85.00"
      },
      "0G": {
        totalAmount: "1000",
        currency: "0G",
        network: "0g-testnet"
      }
    },
    contractAddress: "0x68dde7a0192c9c5c1e0a71cc556579a67458df0d",
    deposit: {
      deposited: false,
      depositedAmount: "0",
      depositedAt: null,
      transactionHash: null
    },
    fees: {
      platformFee: {
        inr: "1700",
        zeroG: "20"
      },
      storageFee: {
        inr: "425",
        zeroG: "5"
      },
      totalFees: {
        inr: "2125",
        zeroG: "25"
      }
    }
  },
  
  storage: {
    contractDocument: {
      rootHash: "0x8e9f12a3b4c5d6e7f8a9b0c1d2e3f4a5b6c7d8e9f0a1b2c3d4e5f6a7b8c9d0e1",
      fileName: "contract_test_signed.pdf",
      uploadedAt: new Date().toISOString(),
      uploadedBy: "0x742d35Cc6634C0532925a3b8D4C0C8b3C2e1e1e1",
      fileSize: "2.5MB"
    }
  },
  
  projectDetails: {
    deliverables: [
      "Frontend application",
      "Backend API",
      "Database setup"
    ],
    timeline: "30 days",
    startDate: "2024-01-15",
    endDate: "2024-02-15"
  },
  
  legalContract: {
    contractText: "Full legal contract text generated by AI...",
    generatedAt: new Date().toISOString(),
    generatedBy: "0G_Compute_TEE",
    storageRootHash: "0x8e9f12a3b4c5d6e7f8a9b0c1d2e3f4a5b6c7d8e9f0a1b2c3d4e5f6a7b8c9d0e1",
    verificationProof: {
      type: "TEE",
      hash: "0xabcdef1234567890",
      timestamp: new Date().toISOString()
    }
  },
  
  milestones: [
    {
      id: "milestone_001",
      number: 1,
      description: "UI/UX Design completion",
      amounts: {
        inr: "25500",
        zeroG: "300"
      },
      dueDate: "2024-01-25",
      status: "PENDING",
      deliverable: {
        type: "design_files",
        required: ["Figma design files", "Design system documentation"],
        submitted: false,
        submittedAt: null,
        submissionLinks: [],
        storage: null
      },
      verification: {
        agentVerified: false,
        verifiedAt: null,
        verificationNote: ""
      },
      review: {
        clientReviewed: false,
        reviewedAt: null,
        approved: null,
        feedback: "",
        revisionRequested: false,
        revisionCount: 0
      },
      payment: {
        released: false,
        releasedAt: null,
        transactionHash: null
      }
    }
  ],
  
  currentMilestone: null,
  
  agentInfo: {
    iNFTContractAddress: "0x81674f2f71dc648e391ff90a8e9556e41bbf42f7",
    iNFTTokenId: "12345",
    lastAction: null
  },
  
  stageHistory: [
    {
      stage: "Jurisdiction Selected",
      timestamp: new Date().toISOString(),
      triggeredBy: "user",
      note: "India selected as jurisdiction"
    },
    {
      stage: "Signatures Pending",
      timestamp: new Date().toISOString(),
      triggeredBy: "system",
      note: "Contract created and awaiting signatures"
    }
  ],
  
  shareableLink: "https://pacter.com/contracts/test_contract",
  createdAt: new Date().toISOString(),
  lastUpdated: new Date().toISOString(),
  status: "ACTIVE"
};

async function testBackendContract() {
  console.log("=".repeat(80));
  console.log("BACKEND CONTRACT FORMAT TEST");
  console.log("Testing complete backendformat.md structure upload to Redis");
  console.log("=".repeat(80));
  console.log();

  try {
    // Step 1: POST the complete contract
    console.log("Step 1: Uploading complete contract to API...");
    console.log("-".repeat(80));
    
    const createResponse = await fetch(`${API_BASE_URL}/api/contracts`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(testContract),
    });

    if (!createResponse.ok) {
      const errorText = await createResponse.text();
      throw new Error(`Failed to create contract: ${createResponse.status} - ${errorText}`);
    }

    const createResult = await createResponse.json();
    console.log("✓ Contract uploaded successfully!");
    console.log(`  Contract ID: ${createResult.contract.id}`);
    console.log();

    const contractId = createResult.contract.id;

    // Step 2: Retrieve the specific contract by ID
    console.log("Step 2: Retrieving contract by ID from API...");
    console.log("-".repeat(80));
    
    const getResponse = await fetch(`${API_BASE_URL}/api/contracts?id=${contractId}`);
    
    if (!getResponse.ok) {
      throw new Error(`Failed to fetch contract: ${getResponse.status}`);
    }

    const retrievedContract = await getResponse.json();
    console.log("✓ Contract retrieved successfully!");
    console.log();

    // Step 3: Fetch entire database from Redis directly
    console.log("Step 3: Fetching entire database from Redis...");
    console.log("-".repeat(80));
    
    const redisResponse = await fetch(`${UPSTASH_REDIS_REST_URL}/get/database`, {
      headers: {
        Authorization: `Bearer ${UPSTASH_REDIS_REST_TOKEN}`,
      },
    });

    if (!redisResponse.ok) {
      throw new Error(`Redis fetch failed: ${redisResponse.status}`);
    }

    const redisData = await redisResponse.json();
    console.log("✓ Database fetched from Redis!");
    console.log();

    // Display Results
    console.log("=".repeat(80));
    console.log("RESULTS");
    console.log("=".repeat(80));
    console.log();

    console.log("1. RETRIEVED CONTRACT (by ID):");
    console.log("-".repeat(80));
    console.log(JSON.stringify(retrievedContract, null, 2));
    console.log();

    console.log("2. ENTIRE REDIS DATABASE:");
    console.log("-".repeat(80));
    console.log(JSON.stringify(redisData.result, null, 2));
    console.log();

    // Verification
    console.log("3. VERIFICATION:");
    console.log("-".repeat(80));
    
    const dbContracts = redisData.result?.contracts || [];
    const foundContract = dbContracts.find(c => c.id === contractId);
    
    if (foundContract) {
      console.log("✓ Contract found in Redis database");
      console.log(`  Total contracts in database: ${dbContracts.length}`);
      console.log();
      
      // Check key fields from backendformat.md
      console.log("4. STRUCTURE VALIDATION:");
      console.log("-".repeat(80));
      console.log(`✓ Has jurisdiction: ${!!foundContract.jurisdiction}`);
      console.log(`✓ Has parties: ${!!foundContract.parties}`);
      console.log(`✓ Has signatures: ${!!foundContract.signatures}`);
      console.log(`✓ Has escrow: ${!!foundContract.escrow}`);
      console.log(`✓ Has escrow.amounts.inr: ${!!foundContract.escrow?.amounts?.inr}`);
      console.log(`✓ Has escrow.amounts.0G: ${!!foundContract.escrow?.amounts?.["0G"]}`);
      console.log(`✓ Has storage: ${!!foundContract.storage}`);
      console.log(`✓ Has projectDetails: ${!!foundContract.projectDetails}`);
      console.log(`✓ Has legalContract: ${!!foundContract.legalContract}`);
      console.log(`✓ Has milestones: ${!!foundContract.milestones}`);
      console.log(`✓ Has agentInfo: ${!!foundContract.agentInfo}`);
      console.log(`✓ Has stageHistory: ${!!foundContract.stageHistory}`);
      console.log();
      
      console.log("5. KEY DATA:");
      console.log("-".repeat(80));
      console.log(`Contract ID: ${foundContract.id}`);
      console.log(`Contract Hash: ${foundContract.contractHash}`);
      console.log(`Project Type: ${foundContract.projectType}`);
      console.log(`Current Stage: ${foundContract.currentStage}`);
      console.log(`Jurisdiction: ${foundContract.jurisdiction?.country}`);
      console.log(`Client: ${foundContract.parties?.client?.name}`);
      console.log(`Freelancer: ${foundContract.parties?.freelancer?.name}`);
      console.log(`INR Amount: ₹${foundContract.escrow?.amounts?.inr?.totalAmount}`);
      console.log(`0G Amount: ${foundContract.escrow?.amounts?.["0G"]?.totalAmount} 0G`);
      console.log(`Milestones: ${foundContract.milestones?.length || 0}`);
      console.log();
    } else {
      console.log("✗ Contract NOT found in Redis database");
      console.log();
    }

    console.log("=".repeat(80));
    console.log("✓ TEST COMPLETED SUCCESSFULLY");
    console.log("=".repeat(80));
    console.log();
    console.log("Summary:");
    console.log(`  - Contract uploaded: ${contractId}`);
    console.log(`  - Retrieved successfully: YES`);
    console.log(`  - Found in Redis: ${foundContract ? "YES" : "NO"}`);
    console.log(`  - Structure matches backendformat.md: ${foundContract ? "YES" : "NO"}`);
    console.log(`  - Total contracts in database: ${dbContracts.length}`);

  } catch (error) {
    console.error();
    console.error("❌ ERROR:", error.message);
    console.error();
    console.error("Full error:", error);
    console.error();
    console.error("Make sure:");
    console.error("  1. Your Next.js dev server is running (npm run dev)");
    console.error("  2. The server is accessible at http://localhost:3000");
    console.error("  3. Redis credentials are correct");
    console.error("  4. The /api/contracts route is working");
  }
}

// Run the test
testBackendContract();
