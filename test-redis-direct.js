/**
 * Direct Redis Database Test
 * Tests uploading complete backendformat.md structure directly to Redis
 * Key: "database"
 * Value: { contracts: [...] }
 */

const UPSTASH_REDIS_REST_URL = "https://bursting-gibbon-19323.upstash.io";
const UPSTASH_REDIS_REST_TOKEN = "AUt7AAIncDIwMGUzNjg2ZDQyYzc0NTIyODJlZTQ5YzAwZDkxMGMyZXAyMTkzMjM";

// Complete contract matching backendformat.md
function createContract(id, name, clientName, freelancerName, amount) {
  return {
    id: id,
    contractHash: "0x" + Math.random().toString(16).substr(2, 40),
    name: name,
    projectType: "web_development",
    description: "Project description here",
    
    currentStage: "Signatures Pending",
    flowType: "execution",
    
    jurisdiction: {
      country: "India",
      countryCode: "IN",
      legalFramework: "Indian Contract Act, 1872",
      disputeResolution: "Indian Courts/Arbitration",
      applicableLaws: ["Indian Contract Act", "Information Technology Act", "Goods and Services Tax Act"],
      timezone: "Asia/Kolkata"
    },
    
    parties: {
      client: {
        name: clientName,
        email: `${clientName.toLowerCase().replace(/\s+/g, '.')}@example.com`,
        walletAddress: "0x742d35Cc6634C0532925a3b8D4C0C8b3C2e1e1e1",
        role: "CLIENT",
        location: {
          country: "India",
          state: "Maharashtra",
          city: "Mumbai"
        }
      },
      freelancer: {
        name: freelancerName,
        email: `${freelancerName.toLowerCase().replace(/\s+/g, '.')}@example.com`,
        walletAddress: "0x8ba1f109551bD432803012645Hac136c22C177e9",
        role: "FREELANCER",
        skills: ["React", "Node.js", "TypeScript"],
        location: {
          country: "India",
          state: "Karnataka",
          city: "Bangalore"
        }
      }
    },
    
    signatures: {
      client: {
        signed: false,
        signedAt: null,
        signature: null
      },
      freelancer: {
        signed: false,
        signedAt: null,
        signature: null
      },
      bothSigned: false
    },
    
    escrow: {
      amounts: {
        inr: {
          totalAmount: amount.toString(),
          currency: "INR",
          exchangeRateAt: new Date().toISOString(),
          exchangeRate: "85.00"
        },
        "0G": {
          totalAmount: Math.round(amount / 85).toString(),
          currency: "0G",
          network: "0g-testnet"
        }
      },
      contractAddress: "0x68dde7a0192c9c5c1e0a71cc556579a67458df0d",
      
      deposit: {
        deposited: false,
        depositedAmount: "0",
        depositedAt: null,
        transactionHash: null
      },
      
      fees: {
        platformFee: {
          inr: Math.round(amount * 0.025).toString(),
          zeroG: Math.round((amount / 85) * 0.025).toString()
        },
        storageFee: {
          inr: Math.round(amount * 0.005).toString(),
          zeroG: Math.round((amount / 85) * 0.005).toString()
        },
        totalFees: {
          inr: Math.round(amount * 0.03).toString(),
          zeroG: Math.round((amount / 85) * 0.03).toString()
        }
      }
    },
    
    storage: {
      contractDocument: {
        rootHash: "0x" + Math.random().toString(16).substr(2, 64),
        fileName: `${id}_signed.pdf`,
        uploadedAt: new Date().toISOString(),
        uploadedBy: "0x742d35Cc6634C0532925a3b8D4C0C8b3C2e1e1e1",
        fileSize: "2.5MB"
      }
    },
    
    projectDetails: {
      deliverables: [
        "Frontend application",
        "Backend API",
        "Database setup"
      ],
      timeline: "30 days",
      startDate: new Date().toISOString().split('T')[0],
      endDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0]
    },
    
    legalContract: {
      contractText: "Full legal contract text generated by AI...",
      generatedAt: new Date().toISOString(),
      generatedBy: "0G_Compute_TEE",
      storageRootHash: "0x" + Math.random().toString(16).substr(2, 64),
      verificationProof: {
        type: "TEE",
        hash: "0x" + Math.random().toString(16).substr(2, 16),
        timestamp: new Date().toISOString()
      }
    },
    
    milestones: [
      {
        id: `${id}_milestone_001`,
        number: 1,
        description: "UI/UX Design completion",
        amounts: {
          inr: Math.round(amount * 0.3).toString(),
          zeroG: Math.round((amount / 85) * 0.3).toString()
        },
        dueDate: new Date(Date.now() + 10 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],
        status: "PENDING",
        
        deliverable: {
          type: "design_files",
          required: ["Figma design files", "Design system documentation"],
          submitted: false,
          submittedAt: null,
          submissionLinks: [],
          storage: null
        },
        
        verification: {
          agentVerified: false,
          verifiedAt: null,
          verificationNote: ""
        },
        
        review: {
          clientReviewed: false,
          reviewedAt: null,
          approved: null,
          feedback: "",
          revisionRequested: false,
          revisionCount: 0
        },
        
        payment: {
          released: false,
          releasedAt: null,
          transactionHash: null
        }
      }
    ],
    
    currentMilestone: null,
    
    agentInfo: {
      iNFTContractAddress: "0x81674f2f71dc648e391ff90a8e9556e41bbf42f7",
      iNFTTokenId: Math.floor(Math.random() * 100000).toString(),
      lastAction: null
    },
    
    stageHistory: [
      {
        stage: "Jurisdiction Selected",
        timestamp: new Date().toISOString(),
        triggeredBy: "user",
        note: "India selected as jurisdiction"
      },
      {
        stage: "Signatures Pending",
        timestamp: new Date().toISOString(),
        triggeredBy: "system",
        note: "Contract created and awaiting signatures"
      }
    ],
    
    shareableLink: `https://pacter.com/contracts/${id}`,
    createdAt: new Date().toISOString(),
    lastUpdated: new Date().toISOString(),
    status: "ACTIVE"
  };
}

async function getDatabase() {
  const response = await fetch(`${UPSTASH_REDIS_REST_URL}/get/database`, {
    headers: {
      Authorization: `Bearer ${UPSTASH_REDIS_REST_TOKEN}`,
    },
  });
  
  const data = await response.json();
  
  // Handle different response formats
  if (typeof data.result === 'string') {
    return JSON.parse(data.result);
  }
  
  return data.result || { contracts: [] };
}

async function setDatabase(database) {
  const response = await fetch(`${UPSTASH_REDIS_REST_URL}/set/database`, {
    method: 'POST',
    headers: {
      Authorization: `Bearer ${UPSTASH_REDIS_REST_TOKEN}`,
    },
    body: JSON.stringify(database),
  });
  
  return await response.json();
}

async function testDirectRedis() {
  console.log("=".repeat(80));
  console.log("DIRECT REDIS DATABASE TEST");
  console.log("Testing backendformat.md structure with database key");
  console.log("=".repeat(80));
  console.log();

  try {
    // Step 1: Get current database
    console.log("Step 1: Fetching current database...");
    console.log("-".repeat(80));
    
    let database = await getDatabase();
    console.log(`✓ Current database has ${database.contracts?.length || 0} contracts`);
    console.log();

    // Step 2: Add a new contract
    console.log("Step 2: Creating new contract...");
    console.log("-".repeat(80));
    
    const newContract = createContract(
      `contract_${Date.now()}`,
      "E-commerce Website Development",
      "Rajesh Kumar",
      "Priya Sharma",
      50000
    );
    
    console.log(`✓ Created contract: ${newContract.id}`);
    console.log(`  Name: ${newContract.name}`);
    console.log(`  Client: ${newContract.parties.client.name}`);
    console.log(`  Freelancer: ${newContract.parties.freelancer.name}`);
    console.log(`  Amount: ₹${newContract.escrow.amounts.inr.totalAmount} INR`);
    console.log();

    // Step 3: Add to database and upload
    console.log("Step 3: Adding contract to database...");
    console.log("-".repeat(80));
    
    if (!database.contracts) {
      database = { contracts: [] };
    }
    
    database.contracts.push(newContract);
    
    const uploadResult = await setDatabase(database);
    console.log("✓ Database uploaded to Redis");
    console.log();

    // Step 4: Retrieve and verify
    console.log("Step 4: Retrieving database to verify...");
    console.log("-".repeat(80));
    
    const verifyDatabase = await getDatabase();
    const foundContract = verifyDatabase.contracts.find(c => c.id === newContract.id);
    
    if (foundContract) {
      console.log("✓ Contract found in database!");
      console.log(`  Total contracts now: ${verifyDatabase.contracts.length}`);
      console.log();
    } else {
      console.log("✗ Contract NOT found in database");
      console.log();
    }

    // Step 5: Edit the contract (simulate signature)
    console.log("Step 5: Editing contract (adding client signature)...");
    console.log("-".repeat(80));
    
    const contractIndex = verifyDatabase.contracts.findIndex(c => c.id === newContract.id);
    if (contractIndex !== -1) {
      verifyDatabase.contracts[contractIndex].signatures.client.signed = true;
      verifyDatabase.contracts[contractIndex].signatures.client.signedAt = new Date().toISOString();
      verifyDatabase.contracts[contractIndex].signatures.client.signature = "0x" + Math.random().toString(16).substr(2, 130);
      verifyDatabase.contracts[contractIndex].lastUpdated = new Date().toISOString();
      
      // Upload edited database
      await setDatabase(verifyDatabase);
      console.log("✓ Contract updated with client signature");
      console.log();
    }

    // Step 6: Final verification
    console.log("Step 6: Final verification...");
    console.log("-".repeat(80));
    
    const finalDatabase = await getDatabase();
    const finalContract = finalDatabase.contracts.find(c => c.id === newContract.id);
    
    console.log("COMPLETE DATABASE STRUCTURE:");
    console.log(JSON.stringify(finalDatabase, null, 2));
    console.log();

    // Display summary
    console.log("=".repeat(80));
    console.log("TEST SUMMARY");
    console.log("=".repeat(80));
    console.log();
    console.log(`✓ Total contracts in database: ${finalDatabase.contracts.length}`);
    console.log();
    
    if (finalContract) {
      console.log("✓ Test contract details:");
      console.log(`  ID: ${finalContract.id}`);
      console.log(`  Name: ${finalContract.name}`);
      console.log(`  Client: ${finalContract.parties.client.name} (${finalContract.parties.client.email})`);
      console.log(`  Freelancer: ${finalContract.parties.freelancer.name} (${finalContract.parties.freelancer.email})`);
      console.log(`  Amount: ₹${finalContract.escrow.amounts.inr.totalAmount} INR`);
      console.log(`  0G Amount: ${finalContract.escrow.amounts["0G"].totalAmount} 0G`);
      console.log(`  Client Signed: ${finalContract.signatures.client.signed ? "YES ✓" : "NO"}`);
      console.log(`  Freelancer Signed: ${finalContract.signatures.freelancer.signed ? "YES ✓" : "NO"}`);
      console.log(`  Milestones: ${finalContract.milestones.length}`);
      console.log(`  Status: ${finalContract.status}`);
      console.log();
    }

    console.log("=".repeat(80));
    console.log("✓ ALL TESTS PASSED");
    console.log("=".repeat(80));
    console.log();
    console.log("The database structure matches backendformat.md!");
    console.log("You can now:");
    console.log("  1. Retrieve the whole database");
    console.log("  2. Find a contract by ID");
    console.log("  3. Edit that contract");
    console.log("  4. Upload the whole database back");

  } catch (error) {
    console.error();
    console.error("❌ ERROR:", error.message);
    console.error();
    console.error("Full error:", error);
  }
}

// Run the test
testDirectRedis();
